#!/bin/sh

set -e

PROTO=git

VIM_PLUGINS='morhetz/gruvbox=v2.0.0
pangloss/vim-javascript=v0.9.0
tpope/vim-markdown=ba29415
hail2u/vim-css3-syntax=v0.14.0
elzr/vim-json=f5e3181
avakhov/vim-yaml=4b37a4f
mustache/vim-mustache-handlebars=6062b5b
metalelf0/vimt0d0=493a164
ervandew/supertab=2.1
scrooloose/syntastic=3.4.0
vim-scripts/IndexedSearch=500a64a
nelstrom/vim-visual-star-search=59d5f09
bling/vim-bufferline=57f0e8a'

err() {
  printf "%-40s %s\n" $1 "$2" >&2
}

ensure_git() {
  local target=$1

  [ -d $target/.git ]
}

ensure_remote() {
  local repo=$1
  local target=$2

  (cd $target && git remote show -n origin | grep -qE "Fetch URL.+${repo}")
}

ensure_repo() {
  local repo=$1
  local target=$2
  local version=$3

  if ! ensure_git $target || ! ensure_remote $repo $target; then
    rm -rf $target
    git clone -q $PROTO://github.com/$repo.git $target
  else
    (cd $target && git fetch -q)
  fi

  (cd $target && git checkout -q $version)
}

ensure_plugins() {
  local root=$1
  local plugins="$2"
  local plugin

  test -d $root || mkdir -p $root

  for plugin in $plugins; do
    local repo=${plugin%%=*}
    local name=${repo##*/}
    local version=${plugin##*=}

    ensure_repo $repo $root/$name $version
  done
}

_strip() {
  printf '%s' "$@" | cut -c1-7
}

_vrange() {
  printf '%s -> %s' $(_strip $1) $(_strip $2)
}

_vstrip() {
  {
    if [ "$@" ]; then
      printf '%s' "$@"
    else
      cat
    fi
  } | sed 's/[^0-9\.]//g'
}

_vsort() {
  sort -t. -k1,1n -k2,2n -k3,3n -k4,4n
}

status_repo() {
  local repo=$1
  local target=$2
  local version=$3

  if ! ensure_git $target; then
    err $repo 'not installed'
    return
  fi

  if ! ensure_remote $repo $target; then
    err $repo "not using $repo remote"
    return
  fi

  if printf '%s' $version | grep -q '^[v0-9.]*$'; then
    local actual_version=$(cd $target && git describe --tags | _vstrip)
    local origin_version=$(cd $target && git tag | _vstrip | _vsort | tail -n1)

    if [ "$actual_version" = $(_vstrip $version) ]; then
      if [ "$actual_version" != "$origin_version" ]; then
        err $repo "$(_vrange $actual_version $origin_version)"
      fi
      return
    fi
  else
    local actual_version=$(cd $target && git rev-parse HEAD)
    local origin_version=$(cd $target && git rev-parse origin/HEAD)
    local behind=$(cd $target && git rev-list --count origin...HEAD 2>/dev/null)

    if printf '%s' $actual_version | grep -q "^$version"; then
      if [ "$actual_version" != "$origin_version" ]; then
        err $repo "$(_vrange $actual_version $origin_version) (behind $behind)"
      fi
      return
    fi
  fi

  err $repo "not updated to $version"
}

status_plugins() {
  local root=$1
  local plugins="$2"
  local plugin

  for plugin in $plugins; do
    local repo="${plugin%%=*}"
    local name="${repo##*/}"
    local version="${plugin##*=}"

    status_repo $repo $root/$name $version
  done
}

case $1 in
  sync)
    if [ $# -eq 2 ]; then
      case $2 in
        git|http|https)
        PROTO=$2
        ;;
      esac
    fi

    ensure_plugins "$HOME/.vim/bundle" "${VIM_PLUGINS}"
  ;;
  status)
    status_plugins "$HOME/.vim/bundle" "${VIM_PLUGINS}"
  ;;
  *)
    printf 'Usage: %s <sync [git|http|https]|status>\n' $(basename $0) >&2
    exit 64
  ;;
esac

#!/usr/bin/env bash

set -e

PROTO=git

VIM_PLUGINS=(
  'chriskempson/base16-vim    701117e'

  'pangloss/vim-javascript    ccdf8b7'
  'tpope/vim-markdown         451eefb'
  'hail2u/vim-css3-syntax     v0.7'
  'elzr/vim-json              3b3fa6b'

  'ervandew/supertab          2.0'
  'scrooloose/syntastic       3.0.0'
  'tpope/vim-characterize     d5ba608'
  'vim-scripts/IndexedSearch  500a64a'
  'vim-scripts/gitignore      061c5c7'

  'vim-scripts/genutils       2.5'
  'uggedal/SelectBuf          2916b8f'
)

err() {
  printf "%-40s %s\n" $1 "$2" >&2
}

ensure_git() {
  local target=$1

  test -d $target/.git
}

ensure_remote() {
  local repo=$1
  local target=$2

  (cd $target && git remote show -n origin | grep -qE "Fetch URL.+${repo}")
}

ensure_repo() {
  local repo=$1
  local target=$2
  local version=$3

  if ! ensure_git $target || ! ensure_remote $repo $target; then
    rm -rf $target
    git clone -q $PROTO://github.com/$repo.git $target
  else
    (cd $target && git fetch -q)
  fi

  (cd $target && git checkout -q $version)
}

ensure_plugins() {
  local root=$1
  shift
  local plugins=("${@}")

  test -d $root || mkdir -p $root

  for plugin in "${plugins[@]}"; do
    local repo=${plugin%% *}
    local name=${repo##*/}
    local version=${plugin##* }

    ensure_repo $repo $root/$name $version
  done
}

status_repo() {
  local repo=$1
  local target=$2
  local version=$3

  if ! ensure_git $target; then
    err $repo 'not installed'
    return
  fi

  if ! ensure_remote $repo $target; then
    err $repo "not using $repo remote"
    return
  fi

  if grep -q '^[v0-9.]\+$' <<<$version; then
    local actual_version=$(cd $target && git describe --tags)
    local tags=$(cd $target && git tag)
    local index=$(grep -En '^.+$' <<< "$tags" | grep :$actual_version\$ | cut -d: -f1)
    local num=$( wc -l <<< "$tags")
    local behind=$(($num - $index))

    if [ $actual_version = $version ]; then
      if [ "$behind" -gt 0 ]; then
        err $repo "behind $behind upstream tags"
      fi
      return
    fi
  else
    local actual_version=$(cd $target && git rev-parse HEAD)
    local behind=$(cd $target && git rev-list --count origin...HEAD 2>/dev/null)

    if grep -q "^$version" <<<$actual_version; then
      if [ "$behind" -gt 0 ]; then
        err $repo "behind $behind upstream changes"
      fi
      return
    fi
  fi

  err $repo "not updated to $version"
}

status_plugins() {
  local root=$1
  shift
  local plugins=("${@}")

  for plugin in "${plugins[@]}"; do
    local repo=${plugin%% *}
    local name=${repo##*/}
    local version=${plugin##* }

    status_repo $repo $root/$name $version
  done
}

case $1 in
  sync)
    if [ $# -eq 2 ] && [[ $2  =~ ^(git|https?)$ ]]; then
      PROTO=$2
    fi

    ensure_plugins "$HOME/.vim/bundle" "${VIM_PLUGINS[@]}"
  ;;
  status)
    status_plugins "$HOME/.vim/bundle" "${VIM_PLUGINS[@]}"
  ;;
  *)
    echo Usage: $(basename $0) '<sync [git|http|https]|status>'
    exit 64
  ;;
esac
